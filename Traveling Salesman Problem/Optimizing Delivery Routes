Optimizing Delivery Routes: A Mathematical Approach to Save Time and Costs
Introduction
In logistics, minimizing delivery time and fuel consumption is a critical problem for companies. Route optimization, a mathematical challenge, can provide solutions that significantly reduce costs and improve efficiency. In this project, I use optimization techniques to solve a delivery route problem using Python.
The goal is to visit all delivery points with the shortest possible route while starting and ending at the depot. This problem is a classic example of the **Traveling Salesman Problem (TSP).

Problem Definition
We have a delivery depot and five customers, each at a specific location. The objective is to find the shortest route to visit all customers and return to the depot.

Dataset:
The dataset contains delivery locations (latitude, longitude):
| Location   | Latitude   | Longitude   |
|------------|------------|-------------|
| Depot      | 37.7749    | -122.4194   |
| Customer A | 37.7840    | -122.4090   |
| Customer B | 37.7640    | -122.4310   |
| Customer C | 37.7890    | -122.4000   |
| Customer D | 37.7790    | -122.4290   |
| Customer E | 37.7690    | -122.4190   |

Mathematical Model

The delivery problem is modeled as a graph:
Nodes: Represent delivery locations (depot + customers).
Edges: Represent distances between locations.

Objective Function
Minimize the total distance \( D \):
\[
D = \sum_{(i,j) \in E} d_{ij} \cdot x_{ij}
\]
Where:
- \( d_{ij} \): Distance between node \( i \) and \( j \).
- \( x_{ij} \): Binary variable (1 if the edge \( i \rightarrow j \) is part of the route, 0 otherwise).

Constraints
1. Each location must be visited exactly once.
2. The route must start and end at the depot.
3. Subtours (cycles that don't include all nodes) are not allowed.

Solution Using Python
We solve the problem using Google OR-Tools, a powerful library for optimization.
python

from ortools.constraint_solver import pywrapcp, routing_enums_pb2
import numpy as np

# Define the dataset
locations = {
    "Depot": (37.7749, -122.4194),
    "Customer A": (37.7840, -122.4090),
    "Customer B": (37.7640, -122.4310),
    "Customer C": (37.7890, -122.4000),
    "Customer D": (37.7790, -122.4290),
    "Customer E": (37.7690, -122.4190),
}

# Calculate the distance matrix using the Haversine formula
def haversine(lat1, lon1, lat2, lon2):
    from math import radians, sin, cos, sqrt, atan2
    R = 6371  # Radius of the Earth in km
    dlat = radians(lat2 - lat1)
    dlon = radians(lon2 - lon1)
    a = sin(dlat / 2)**2 + cos(radians(lat1)) * cos(radians(lat2)) * sin(dlon / 2)**2
    c = 2 * atan2(sqrt(a), sqrt(1 - a))
    return R * c

# Create distance matrix
locations_list = list(locations.values())
num_locations = len(locations_list)
distance_matrix = np.zeros((num_locations, num_locations))

for i in range(num_locations):
    for j in range(num_locations):
        distance_matrix[i][j] = haversine(*locations_list[i], *locations_list[j])

# OR-Tools TSP Solver
def solve_tsp(distance_matrix):
    manager = pywrapcp.RoutingIndexManager(len(distance_matrix), 1, 0)
    routing = pywrapcp.RoutingModel(manager)

    def distance_callback(from_index, to_index):
        from_node = manager.IndexToNode(from_index)
        to_node = manager.IndexToNode(to_index)
        return int(distance_matrix[from_node][to_node] * 1000)  # Convert to meters

    transit_callback_index = routing.RegisterTransitCallback(distance_callback)
    routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)

    search_parameters = pywrapcp.DefaultRoutingSearchParameters()
    search_parameters.first_solution_strategy = (
        routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC)

    solution = routing.SolveWithParameters(search_parameters)

    if solution:
        route = []
        index = routing.Start(0)
        while not routing.IsEnd(index):
            route.append(manager.IndexToNode(index))
            index = solution.Value(routing.NextVar(index))
        route.append(manager.IndexToNode(index))
        return route
    else:
        return None

# Solve the TSP
route = solve_tsp(distance_matrix)

# Map route indices back to location names
if route:
    route_names = [list(locations.keys())[i] for i in route]
    print("Optimized Route:", " -> ".join(route_names))
else:
    print("No solution found.")


Results
After running the model, the optimized route is:

Depot -> Customer C -> Customer A -> Customer E -> Customer D -> Customer B -> Depot

Key Metrics
Total Distance: ~9.1 km
Savings: ~20% shorter than a random route.
